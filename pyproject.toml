[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "awpy"
version = "2.0.0a3"
description = "Counter-Strike 2 demo parsing, analysis and visualization"
readme = "README.md"
authors = [
    "Peter Xenopoulos <xenopoulos@nyu.edu>",
    "Jan-Eric Nitschke <janericnitschke@gmail.com>"
]
license = "MIT"
keywords = ["counter-strike 2", "counter-strike", "csgo", "esports", "sports-analytics"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: First Person Shooters",
    "Topic :: Scientific/Engineering :: Information Analysis"
]
homepage = "https://awpycs.com"
repository = "https://github.com/pnxenopoulos/awpy"

[tool.poetry.dependencies]
python = ">=3.9"
click = ">=8.1.7"
loguru = ">=0.7.2"
matplotlib = ">=3.9.0"
numpy = ">=1.26.3"
pandas = ">=2.2.2"
setuptools = ">=69.2.0"
sphinx-rtd-theme = "==2.0.0"
demoparser2 = ">=0.25.0"
tqdm = "^4.66.4"

[tool.poetry.dev-dependencies]
black = "^24.4.2"
pytest = "^6.2"
requests = "^2.32.3"
ruff = "^0.0.259"
pyright = "^1.1.198"
pylint = "^3.2.2"
coverage = "^5.5"

[tool.poetry.scripts]
awpy = "awpy.cli:awpy"

# Test & Coverage config
[tool.coverage.run]
branch = true
source = ["awpy"]

[tool.pytest.ini_options]
testpaths = ["tests"]

# Setuptools
[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["data/maps/*.png"]

# Ruff config
[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs"
]
select = [
    "E",
    "F",
    "B",
    "W",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "A",
    "C4",
    "DTZ",
    "T10",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "ERA",
    "PD",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "NPY",
    "RUF",
    "EM"
]
ignore = ["D208", "ANN101", "T20", "PTH", "TRY003", "BLE001", "PLR2004", "UP007", "ISC001"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
line-length = 88

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 17

[tool.ruff.per-file-ignores]
"__init__.py"              = ["E402", "F401"]
"tests/test_*.py"          = ["ANN201", "S101", "SLF001", "PLR2004"]

# Pyright config
[tool.pyright]
include = ["awpy"]
exclude = ["tests"]
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
useLibraryCodeForTypes = false
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "warning"
reportMissingTypeStubs = "none"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "error"
reportConstantRedefinition = "error"
reportOverlappingOverload = "error"
reportMissingParameterType = "warning"
reportUnnecessaryIsInstance = "none"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportAssertAlwaysTrue = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportImplicitOverride = "none"
reportShadowedImports = "error"

# Pylint config
[tool.pylint.main]
fail-under = 9.85

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "x", "y", "z", "e", "PlayerPosition2D"]
include-naming-hint = true

[tool.pylint.design]
max-args = 15
max-attributes = 8
max-bool-expr = 5
max-branches = 12
max-locals = 20
max-public-methods = 30
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException"]

[tool.pylint.format]
max-line-length = 88
max-module-lines = 2000

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = ["unnecessary-ellipsis"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.messages_control]
disable = ["R0801"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

[tool.pylint.similarities]
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4