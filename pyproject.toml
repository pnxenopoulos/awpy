[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "awpy"
version = "2.0.0rc1"
authors = [
    { name = "Peter Xenopoulos", email = "xenopoulos@nyu.edu" },
    { name = "Jan-Eric Nitschke", email = "janericnitschke@gmail.com" },
]
description = "Counter-Strike demo parsing, analysis and visualization"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["counter-strike", "csgo", "esports", "sports-analytics"]
license = { text = "MIT License" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Games/Entertainment :: First Person Shooters",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "loguru~=0.7.2",
    "numpy~=1.26.3",
    "pandas~=2.2.2",
    "pydantic~=2.7.0",
    "setuptools~=69.2.0",
    "sphinx-rtd-theme==2.0.0",
    "demoparser2~=0.23.0"
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = [
    "data/map/*.png",
    "data/map/*.json",
    "data/nav/*.txt",
    "data/nav/*.csv",
    "data/nav/*.json",
]

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",
    "F",
    "B",
    "W",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "A",
    "C4",
    "DTZ",
    "T10",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "INT",
    "ARG",
    "ERA",
    "PD",
    "PERF",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "NPY",
    "RUF",
    "EM",
]
ignore = ["D208", "ANN101", "T20", "PTH", "TRY003", "BLE001", "PLR2004", "UP007"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py312"

[tool.ruff.per-file-ignores]
"__init__.py"              = ["E402", "F401"]
"awpy/types.py"            = ["N815"]
"setup.py"                 = ["D100"]
"tests/test_*.py"          = ["ANN201", "S101", "SLF001", "PLR2004"]
"awpy/analytics/states.py" = ["ARG001"]
"awpy/analytics/wpa.py"    = ["ARG001"]
"awpy/parser/cleaning.py"  = ["PLC1901"]

[tool.ruff.pydocstyle]
convention = "google" # Accepts: "google", "numpy", or "pep257".

[tool.ruff.pylint]
max-args = 17

[tool.pyright]
include                            = ["awpy"]
exclude                            = ["tests"]
strictListInference                = true
strictDictionaryInference          = true
strictSetInference                 = true
useLibraryCodeForTypes             = false
reportPropertyTypeMismatch         = "error"
reportFunctionMemberAccess         = "warning"
reportMissingTypeStubs             = "none"
reportUntypedFunctionDecorator     = "error"
reportUntypedClassDecorator        = "error"
reportUntypedBaseClass             = "error"
reportUntypedNamedTuple            = "error"
reportPrivateUsage                 = "error"
reportConstantRedefinition         = "error"
reportOverlappingOverload          = "error"
reportMissingParameterType         = "warning"
reportUnnecessaryIsInstance        = "none"
reportUnnecessaryCast              = "error"
reportUnnecessaryComparison        = "error"
reportUnnecessaryContains          = "error"
reportAssertAlwaysTrue             = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportImplicitOverride             = "none"
reportShadowedImports              = "error"


[tool.coverage.run]
branch = true
source = ["awpy"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.pylint.main]
# Specify a score threshold under which the program will exit with error.
fail-under = 9.85

[tool.pylint.basic]
# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "ex", "Run", "_", "x", "y", "z", "e", "PlayerPosition2D"]
include-naming-hint = true

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 15

# Maximum number of attributes for a class (see R0902).
# One more than the standard 7 because it double counts
# the json attribute that is just wrapped via the property.
max-attributes = 8

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 12

# Maximum number of locals for function / method body.
max-locals = 20

# Maximum number of public methods for a class (see R0904).
max-public-methods = 30

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException"]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 88

# Maximum number of lines in a module.
max-module-lines = 2000

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = ["unnecessary-ellipsis"] #  but needed for pyright

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.messages_control]
# Disable specific message categories across the project
disable = [
    "R0801",  # Duplicate code detection
]

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

[tool.pylint.similarities]
# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4
